('code_assistant', 'Will give you data related to VideoDB SDK which allows developers to use videodb in python. IMPORTANT: Whenever user wants to write code related to videos, youtube videos or VideoDB specifically, always call this tool.')
('switch_default_token_address', 'Switch to default token address to new token address')
('stock_zh_vote_baidu', 'Get 百度股市通- A 股或指数-股评-投票\n\nReturns data in JSON format.\n\n\n中文: 百度股市通- A 股或指数-股评-投票\n\nReturns data in JSON format.\n\nReturns:\nJSON formatted data\n\n返回:\nJSON格式数据')
('create_pdf_file', 'Create a new PDF file with the provided text content.\n\nArgs:\n    filepath: Path where to save the PDF file\n    content: Text content for the PDF\n    \nReturns:\n    Operation result with success status, message, and filepath')
('add_model_from_url', 'Add a new model using the provided configuration.\n\nArgs:\n    config: A dictionary containing the url model configuration details. The structure of the ModelConfig is as follows:\n        Example usage:\n        {\n            "model_saved_name": "example_model_name",  # The name under which the model is saved.\n            "model_version": "v1",  # The version of the model.\n            "testing_for": "URL", # The purpose for which the model is being tested. (Always URL)\n            "model_name":"example_url",  # The url of the chatbot site provided by user.\n            "model_config": {\n                "model_provider": "url",  # Always fixed to \'url\'\n                "endpoint_url":"example_url",  # Same as model_name\n                "apikey":"none",  # The API key to access the model.\n                "input_modalities": ["text"], # Always fixed to [\'text\']\n                "output_modalities": ["text"], # Always fixed to [\'text\']\n            },\n        }\nAsk the user for the url before passing the config to the tool.\n\nReturns:\n    A dictionary containing the response message and details of the added model.')
('get_model_details', 'Retrieve details of a specific model using its saved name.\n\nArgs:\n    model_saved_name: The name under which the model is saved.\n    model_version: The version of the model to be used for the redteam task.\nReturns:\n    A dictionary containing the details of the model.')
('unmerge_cells', 'Unmerge a range of cells.')
('fetch_gerrit_change', 'Fetch a Gerrit change and its contents.\n\nArgs:\n    change_id: The Gerrit change ID to fetch\n    patchset_number: Optional patchset number to fetch (defaults to latest)\nReturns:\n    Dict containing the raw change information including files and diffs')
('is_valid', 'Check if a geometry is valid.')
('simplify', 'Simplify a geometry.')
('project_geometry', 'Project a geometry between CRS.')
('get_available_crs', 'Get list of available CRS.')
('get_geod_info', 'Get information about a geodetic calculation.')
('get_utm_zone', 'Get UTM zone for given coordinates.')
('drive_create_google_sheet', 'Create a Google Sheet')
('gmail_add_label', 'Add labels to a Gmail message (comma-separated label IDs)')
('gmail_create_draft', 'Create a Gmail draft')
('gmail_list_drafts', 'List Gmail drafts')
('gmail_bulk_modify', '⚠️ UNSAFE: Universal bulk modify messages (executes immediately without confirmation)\n\n⚠️ DANGER: This modifies emails immediately without showing what will be affected!\nFor safety, use prepare_bulk_modify() instead to see a preview first.\n\nExamples:\n- Mark all unread as read: gmail_bulk_modify("is:unread", remove_labels="UNREAD")\n- Archive notifications: gmail_bulk_modify("from:notifications", remove_labels="INBOX") \n- Label CEO emails as important: gmail_bulk_modify("from:ceo@company.com", add_labels="IMPORTANT")\n- Mark inbox as unread: gmail_bulk_modify("in:inbox -is:unread", add_labels="UNREAD")\n- Complex operation: gmail_bulk_modify("older_than:30d", add_labels="OLD", remove_labels="INBOX,UNREAD")\n\n✅ SAFER ALTERNATIVE: Use prepare_bulk_modify() to see preview and confirm before executing.')
('run_nmap', 'Running nmap service scan on a target.')
('run_sqlmap', 'Running sqlmap on a target.')
('run_kubectl_enumeration', 'Run basic kubectl enumeration commands.')
('count_schema_versions', 'Count the number of versions for a specific schema.')
('find_table', 'Find which database contains a specific table')
('mouse_scroll', 'Scroll the mouse wheel\n\nParameters:\n- clicks: Number of scroll clicks, positive scrolls up, negative scrolls down\n- x: Optional, X coordinate of the scroll position, if not provided scrolls at current mouse position\n- y: Optional, Y coordinate of the scroll position, if not provided scrolls at current mouse position\n\nReturns:\n- Description of the operation result')
('create_campaign', "Create a new email campaign in Mailchimp (returns the new campaign's ID and details).")
('send_campaign', 'Send a campaign that has been created (campaign must be ready to send).')
('describe_kafka_cluster', '')
('subtract', 'Subtract two numbers')
('multiply', 'Multiply two numbers')
('cos', 'cos of a number')
('orders_get', 'Get active orders.\n\nArgs:\n    symbol: Symbol name. If specified, only orders for this symbol will be returned.\n    group: Filter for arranging a group of orders (e.g., "*", "USD*", etc.)\n    \nReturns:\n    List[Dict[str, Any]]: List of active orders.')
('rmdir', 'Remove directory and all its contents.\n\n:param path: Directory to remove. Can be relative.')
('lint_sql', 'Lint SQL query and return syntax errors\n\nSome syntax errors are not detected by the parser like trailing commas\n\nArgs:\n    sql: SQL query to analyze\n    dialect: Optional SQL dialect (e.g., \'mysql\', \'postgres\')\n\nReturns:\n    error message or "No syntax errors" if parsing succeeds')
('transpile_sql', 'Transpile SQL statement to another dialect\n\nArgs:\n    sql: SQL statement to transpile\n    read_dialect: SQL dialect to read from\n    write_dialect: SQL dialect to write to\n\nReturns:\n    transpiled SQL or syntax error')
('press', "Presses the specified keyboard key.\n指定されたキーボードのキーを押します。\n\nSee pyautogui documentation for valid key strings.\n有効なキー文字列については、pyautoguiのドキュメントを参照してください。\n\nArgs:\n    key (str): The key to press (e.g., 'enter', 'esc', 'f1', 'a', 'ctrl'). 押すキー（例: 'enter', 'esc', 'f1', 'a', 'ctrl'）。\n\nReturns:\n    str: A confirmation message. 確認メッセージ。")
('get_rhinoscript_python_function_names', 'Return the RhinoScriptsyntax Function Names for specified categories.\n\nParameters:\n- categories: A list of categories of the RhinoScriptsyntax to get.\n\nReturns:\n- A list of function names that are available in the specified categories.\n\nThe following categories are available:\n- application\n- block\n- compat\n- curve\n- dimension\n- document\n- geometry\n- grips\n- group\n- hatch\n- layer\n- light\n- line\n- linetype\n- material\n- mesh\n- object\n- plane\n- pointvector\n- selection\n- surface\n- toolbar\n- transformation\n- userdata\n- userinterface\n- utility\n- view')
('get_scene_info', 'Gets information about objects in the current scene.\n\nReturns:\nA JSON string containing scene information')
('clear_scene', 'Clears all objects from the current scene.\n\nParameters:\n- currentLayerOnly: If true, only delete objects on the current layer\n\nReturns:\nA message indicating the operation result')
('log_claude_message', 'Log a message from Claude for debugging purposes.\n\nParameters:\n- message: The message to log\n- type: The type of message (info, error, warning, debug)\n\nReturns:\nSuccess confirmation')
('code_assistant', 'Will give you data related to VideoDB SDK which allows developers to use videodb in python. IMPORTANT: Whenever user wants to write code related to videos, youtube videos or VideoDB specifically, always call this tool.')
('switch_default_token_address', 'Switch to default token address to new token address')
('stock_margin_sse', 'Get margin trading summary for Shanghai Stock Exchange.\n\nReturns data in JSON format.\n\nParameters:\nstart_date: str - Start date in format "YYYYMMDD" (e.g., "20010106"), default is "20010106"\nend_date: str - End date in format "YYYYMMDD" (e.g., "20210208"), default is "20210208"\n\nReturns:\nJSON formatted data including the following fields:\n- Credit transaction date\n- Margin balance (in CNY)\n- Margin buying amount (in CNY)\n- Short selling volume\n- Short selling amount (in CNY)\n- Short selling volume sold\n- Margin trading balance (in CNY)\n\n\n中文: 上海证券交易所-融资融券数据-融资融券汇总数据\n\n返回 JSON 格式的数据。\n\n参数:\nstart_date: str - 开始日期，格式为 "YYYYMMDD"（例如："20010106"），默认为 "20010106"\nend_date: str - 结束日期，格式为 "YYYYMMDD"（例如："20210208"），默认为 "20210208"\n\n返回:\nJSON格式数据，包含以下字段：\n- 信用交易日期\n- 融资余额（单位：元）\n- 融资买入额（单位：元）\n- 融券余量\n- 融券余量金额（单位：元）\n- 融券卖出量\n- 融资融券余额（单位：元）')
('stock_institute_hold', 'Get institutional investors\' holdings data.\n\nReturns data in JSON format.\n\nParameters:\nsymbol: str - Quarter and year code in format YYYYQ (e.g., "20201" for 2020Q1), default is "20201"\n              From 2005 onwards, where Q represents: 1=Q1, 2=Q2, 3=Q3, 4=Q4\n              For example, "20191" means 2019Q1, "20193" means 2019Q3\n\nReturns:\nJSON formatted data including the following fields:\n- Stock code\n- Stock name\n- Number of institutions\n- Change in number of institutions\n- Holding percentage (%)\n- Increase in holding percentage (%)\n- Percentage of tradable shares (%)\n- Increase in percentage of tradable shares (%)\n\n\n中文: 新浪财经-机构持股-机构持股一览表\n\n返回 JSON 格式的数据。\n\n参数:\nsymbol: str - 年度和季度代码，格式为 YYYYQ（例如："20201" 表示 2020年第一季度），默认为 "20201"\n             从 2005 年开始，其中 Q 代表：1=第一季度，2=第二季度，3=第三季度，4=第四季度\n             例如，"20191" 表示 2019年第一季度，"20193" 表示 2019年第三季度\n\n返回:\nJSON格式数据，包含以下字段：\n- 证券代码\n- 证券简称\n- 机构数\n- 机构数变化\n- 持股比例 (%)\n- 持股比例增幅 (%)\n- 占流通股比例 (%)\n- 占流通股比例增幅 (%)')
('press_key', 'Press the specified keyboard key.')
('lookup_dataset', "Look up a specific dataset and return detailed information about it. IMPORTANT: Always use this\nfunction before querying a new dataset to understand its required parameters and schema.\n\nThe returned information includes:\n1. Required parameters for the dataset (IMPORTANT for datasets like 'balances' that need an address)\n2. Schema details showing available columns and data types\n3. Example queries for the dataset\n\nWhen the dataset requires specific parameters like 'address' (for 'balances'),\nALWAYS use the 'contract' parameter in query_dataset() to pass these values.\n\nExample:\nFor 'balances' dataset, lookup_dataset('balances') will show it requires an 'address' parameter.\nYou should then query it using:\nquery_dataset('balances', blocks='1000:1010', contract='0x1234...')\n\nArgs:\n    name: The name of the dataset to look up\n    sample_start_block: Optional start block for sample data (integer)\n    sample_end_block: Optional end block for sample data (integer)\n    use_latest_sample: If True, use the latest block for sample data\n    sample_blocks_from_latest: Number of blocks before the latest to include in sample\n    \nReturns:\n    Detailed information about the dataset including schema and available fields")
('add_redteam_task', 'Add a redteam task using a saved model.\n\nArgs:\n    model_saved_name: The saved name of the model to be used for the redteam task.\n    model_version: The version of the model to be used for the redteam task.\n    redteam_model_config: The configuration for the redteam task.\n        Example usage:\n            sample_redteam_model_config = {\n            "test_name": redteam_test_name,\n            "dataset_name": "standard",\n            "redteam_test_configurations": { #IMPORTANT: Before setting the redteam test config, ask the user which tests they would want to run and the sample percentage.\n                "bias_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "cbrn_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "insecure_code_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "toxicity_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "harmful_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n            },\n        }\n        These are the only 5 tests available. Ask the user which ones to run and sample percentage for each as well.\n\n        Before calling this tool, ensure that the model name is availble. If not, save a new model then start the redteaming task.\n\n        NOTE: Tests compatible with audio and image modalities are only: cbrn and harmful. Other test types are not compatible with audio and image modalities.\n\nReturns:\n    A dictionary containing the response message and details of the added redteam task.')
('add_custom_redteam_task', 'Add a custom use-case basedredteam task using a saved model.\nNOTE: Not compatible with audio and image modalities.\n\nArgs:\n    model_saved_name: The saved name of the model to be used for the redteam task.\n    model_version: The version of the model to be used for the redteam task.\n    custom_redteam_model_config: The configuration for the customredteam task.\n        Example usage:\n            sample_redteam_model_config = {\n            "test_name": redteam_test_name,\n            "dataset_configuration": { #Ask user for all these details, do not fill it on your own (system_description, policy_description and tools)\n                "system_description": "", # The system description of the model for the custom use-case. (Mandatory)\n                "policy_description": "", # The policy which the model for the custom use-case should follow. (Optional)\n                "tools": [\n                    {\n                        "name": "web_search", # The name of the tool to be used for the custom use-case. (Optional)\n                        "description": "The tool web search is used to search the web for information related to finance." # The description of the tool to be used for the custom use-case. (Optional)\n                    }\n                ],\n                #The following are the default values for the custom use-case. Change them only if the user asks for a different test size.\n                "max_prompts": 500, # The maximum number of prompts to be used for the custom use-case.\n                "scenarios": 2, # The number of scenarios to be used for the custom use-case.\n                "categories": 2, # The number of categories to be used for the custom use-case.\n                "depth": 1, # The depth of the custom use-case.\n                }\n            "redteam_test_configurations": { #IMPORTANT: Before setting the redteam test config, ask the user which tests they would want to run and the sample percentage. Note: The custom test is mandatory. other 5 are optional.\n                "bias_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "cbrn_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "insecure_code_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "toxicity_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                "harmful_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {"basic": ["basic"]},\n                },\n                 "custom_test": {\n                    "sample_percentage": 100, # The sample percentage for the custom use-case. Keep it at 100 unless the user asks for a different sample percentage.\n                    "attack_methods": {"basic": ["basic"]},\n                }\n            },\n        }\n\n        Befor calling this tool, ensure that the model name is availble. If not, save a new model then start the redteaming task.\n\nReturns:\n    A dictionary containing the response message and details of the added redteam task.')
('add_agent_redteam_task', 'Add a redteam task using a saved agent.\n\nArgs:\n    agent_saved_name: The saved name of the agent to be used for the redteam task.\n    agent_version: The version of the agent to be used for the redteam task.\n    agent_redteam_model_config: The configuration for the redteam task. ASK USER FOR ALL THESE DETAILS.\n        Example usage:\n            sample_redteam_model_config = {\n            "test_name": redteam_test_name,\n            "dataset_configuration": { #Ask user for all these details, do not fill it on your own (system_description, policy_description. Tools can be gotten from agent config otherwise ask user)\n                "system_description": "Ask user for this", # Ask user for the system description of the agent for the custom use-case. (Mandatory exactly same as what the user has input)\n                "policy_description": "Ask user for this", # Ask user for the policy which the agent for the custom use-case should follow. (Optional)\n                "tools": [\n                    {\n                        "name": "ask user for this", # The name of the tool to be used for the custom use-case. (Mandatory)\n                        "description": "ask user for this" # The description of the tool to be used for the custom use-case. (Mandatory)\n                    }\n                ],\n                #The following are the default values for the custom use-case. Change them only if the user asks for a different test size.\n                "max_prompts": 500, # The maximum number of prompts to be used for the custom use-case.\n                "scenarios": 2, # The number of scenarios to be used for the custom use-case.\n                "categories": 2, # The number of categories to be used for the custom use-case.\n                "depth": 1, # The depth of the custom use-case.\n                }\n            "redteam_test_configurations": { #IMPORTANT: Before setting the redteam test config, ask the user which tests they would want to run and the sample percentage\n                "alignment_and_governance_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                },\n                "input_and_content_integrity_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                },\n                "infrastructure_and_integration_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                },\n                "security_and_privacy_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                },\n                "human_factors_and_societal_impact_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                },\n                "access_control_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                },\n                "physical_and_actuation_safety_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                },\n                "reliability_and_monitoring_test": {\n                    "sample_percentage": 2,\n                    "attack_methods": {\n                    "basic": [\n                        "basic"\n                    ],\n                    "advanced": {\n                        "static": [\n                        "encoding"\n                        ]\n                    }\n                    }\n                }\n            },\n        }\n\nReturns:\n    A dictionary containing the response message and details of the added redteam task.')
('add_deployment', 'Add a new deployment using the provided configuration.\n\nArgs:\n    deployment_config: A dictionary containing the deployment configuration details.\n\n    Example Usage:\n    {\n        "deployment_config": {\n            sample_deployment_config = {\n            "name": deployment_name,\n            "model_saved_name": model_saved_name,\n            "input_guardrails_policy": {\n                "policy_name": policy_name,\n                "enabled": True,\n                "additional_config": {\n                    "pii_redaction": False  #Add these if any additional detectors than that in the policy are needed\n                },\n                "block": [\n                    "injection_attack",    # Could be any of the active detectors (Ask user if they want to block)\n                    "policy_violation"\n                ]\n            },\n            "output_guardrails_policy": {\n                "policy_name": policy_name,\n                "enabled": False,\n                "additional_config": {\n                    "hallucination": False,  #Add these if any additional detectors than that in the policy are needed\n                    "adherence": False,\n                    "relevancy": False\n                },\n                "block": [\n                    "nsfw"    # Could be any of the active detectors (Ask user if they want to block)\n                ]\n            },\n        }\n    }\n\nAlways ask user if they want to block any of the detectors in the policy for both input and output. (if you dont know what detectors are present in the policy, you can use the get_guardrails_policy tool)\nReturns:\n    A dictionary containing the response message and details of the added deployment.')
('list_ad_accounts', "List down the ad accounts and their names associated with your Facebook account.\nCRITICAL: This function MUST automatically fetch ALL pages using pagination. \nWhen the response contains a 'paging.next' URL, IMMEDIATELY and AUTOMATICALLY \nuse the facebook_fetch_pagination_url tool to fetch the next page. Continue \nthis process until no 'next' URL exists. Do NOT ask the user for permission \nto continue pagination. Do NOT stop after the first page. Always return the \ncomplete consolidated list of ALL ad accounts across all pages in a single \nresponse. This is a requirement, not optional behavior.")
('get_adaccount_insights', 'Retrieves performance insights for a specified Facebook ad account.\n\nThis tool interfaces with the Facebook Graph API\'s Insights edge to fetch comprehensive\nperformance data, such as impressions, reach, cost, conversions, and more. It supports\nvarious options for filtering, time breakdowns, and attribution settings. Note that\nsome metrics returned might be estimated or in development\nCRITICAL: This function MUST automatically fetch ALL pages using pagination. \nWhen the response contains a \'paging.next\' URL, IMMEDIATELY and AUTOMATICALLY \nuse the facebook_fetch_pagination_url tool to fetch the next page. Continue \nthis process until no \'next\' URL exists. Do NOT ask the user for permission \nto continue pagination. Do NOT stop after the first page. Always return the \ncomplete consolidated list of ALL ad accounts across all pages in a single \nresponse. This is a requirement, not optional behavior..\n\nArgs:\n    act_id (str): The target ad account ID, prefixed with \'act_\', e.g., \'act_1234567890\'.\n    fields (Optional[List[str]]): A list of specific metrics and fields to retrieve.\n        If omitted, a default set is returned by the API. Common examples include:\n            - \'account_currency\', \'account_id\', \'account_name\'\n            - \'actions\', \'clicks\', \'conversions\'\n            - \'cpc\', \'cpm\', \'cpp\', \'ctr\'\n            - \'frequency\', \'impressions\', \'reach\', \'spend\'.\n    date_preset (str): A predefined relative time range for the report.\n        Options: \'today\', \'yesterday\', \'this_month\', \'last_month\', \'this_quarter\',\n        \'maximum\', \'last_3d\', \'last_7d\', \'last_14d\', \'last_28d\', \'last_30d\',\n        \'last_90d\', \'last_week_mon_sun\', \'last_week_sun_sat\', \'last_quarter\',\n        \'last_year\', \'this_week_mon_today\', \'this_week_sun_today\', \'this_year\'.\n        Default: \'last_30d\'. This parameter is ignored if \'time_range\', \'time_ranges\',\n        \'since\', or \'until\' is provided.\n    time_range (Optional[Dict[str, str]]): A specific time range defined by \'since\' and \'until\'\n        dates in \'YYYY-MM-DD\' format, e.g., {\'since\': \'2023-10-01\', \'until\': \'2023-10-31\'}.\n        Overrides \'date_preset\'. Ignored if \'time_ranges\' is provided.\n    time_ranges (Optional[List[Dict[str, str]]]): An array of time range objects\n        ({\'since\': \'...\', \'until\': \'...\'}) for comparing multiple periods. Overrides\n        \'time_range\' and \'date_preset\'. Time ranges can overlap.\n    time_increment (str | int): Specifies the granularity of the time breakdown.\n        - An integer from 1 to 90 indicates the number of days per data point.\n        - \'monthly\': Aggregates data by month.\n        - \'all_days\': Provides a single summary row for the entire period.\n        Default: \'all_days\'.\n    level (str): The level of aggregation for the insights.\n        Options: \'account\', \'campaign\', \'adset\', \'ad\'.\n        Default: \'account\'.\n    action_attribution_windows (Optional[List[str]]): Specifies the attribution windows\n        to consider for actions (conversions). Examples: \'1d_view\', \'7d_view\',\n        \'28d_view\', \'1d_click\', \'7d_click\', \'28d_click\', \'dda\', \'default\'.\n        The API default may vary; [\'7d_click\', \'1d_view\'] is common.\n    action_breakdowns (Optional[List[str]]): Segments the \'actions\' results based on\n        specific dimensions. Examples: \'action_device\', \'action_type\',\n        \'conversion_destination\', \'action_destination\'. Default: [\'action_type\'].\n    action_report_time (Optional[str]): Determines when actions are counted.\n        - \'impression\': Actions are attributed to the time of the ad impression.\n        - \'conversion\': Actions are attributed to the time the conversion occurred.\n        - \'mixed\': Uses \'impression\' time for paid metrics, \'conversion\' time for organic.\n        Default: \'mixed\'.\n    breakdowns (Optional[List[str]]): Segments the results by dimensions like demographics\n        or placement. Examples: \'age\', \'gender\', \'country\', \'region\', \'dma\',\n        \'impression_device\', \'publisher_platform\', \'platform_position\', \'device_platform\'.\n        Note: Not all breakdowns can be combined.\n    default_summary (bool): If True, includes an additional summary row in the response.\n        Default: False.\n    use_account_attribution_setting (bool): If True, forces the report to use the\n        attribution settings defined at the ad account level. Default: False.\n    use_unified_attribution_setting (bool): If True, uses the unified attribution\n        settings defined at the ad set level. This is generally recommended for\n        consistency with Ads Manager reporting. Default: True.\n    filtering (Optional[List[dict]]): A list of filter objects to apply to the data.\n        Each object should have \'field\', \'operator\', and \'value\' keys.\n        Example: [{\'field\': \'spend\', \'operator\': \'GREATER_THAN\', \'value\': 50}].\n    sort (Optional[str]): Specifies the field and direction for sorting the results.\n        Format: \'{field_name}_ascending\' or \'{field_name}_descending\'.\n        Example: \'impressions_descending\'.\n    limit (Optional[int]): The maximum number of results to return in one API response page.\n    after (Optional[str]): A pagination cursor pointing to the next page of results.\n        Obtained from the \'paging.cursors.after\' field of a previous response.\n    before (Optional[str]): A pagination cursor pointing to the previous page of results.\n        Obtained from the \'paging.cursors.before\' field of a previous response.\n    offset (Optional[int]): An alternative pagination method; skips the specified\n        number of results. Use cursor-based pagination (\'after\'/\'before\') when possible.\n    since (Optional[str]): For time-based pagination (used if \'time_range\' and \'time_ranges\'\n        are not set), the start timestamp (Unix or strtotime value).\n    until (Optional[str]): For time-based pagination (used if \'time_range\' and \'time_ranges\'\n        are not set), the end timestamp (Unix or strtotime value).\n    locale (Optional[str]): The locale for text responses (e.g., \'en_US\'). This controls \n        language and formatting of text fields in the response.\n\nReturns:\n    Dict: A dictionary containing the requested ad account insights. The main results\n          are in the \'data\' list, and pagination info is in the \'paging\' object.\n\nExample:\n    ```python\n    # Get basic ad account performance for the last 30 days\n    insights = get_adaccount_insights(\n        act_id="act_123456789",\n        fields=["impressions", "clicks", "spend", "ctr"],\n        limit=25\n    )\n\n    # Fetch the next page if available using the pagination tool\n    next_page_url = insights.get("paging", {}).get("next")\n    if next_page_url:\n        next_page_results = fetch_pagination_url(url=next_page_url)\n        print("Fetched next page results.")\n    ```')
('take_screenshot', "Take a screenshot of the user's screen and return it as an image. Use\nthis tool anytime the user wants you to look at something they're doing.")
('gmail_bulk_modify', '⚠️ UNSAFE: Universal bulk modify messages (executes immediately without confirmation)\n\n⚠️ DANGER: This modifies emails immediately without showing what will be affected!\nFor safety, use prepare_bulk_modify() instead to see a preview first.\n\nExamples:\n- Mark all unread as read: gmail_bulk_modify("is:unread", remove_labels="UNREAD")\n- Archive notifications: gmail_bulk_modify("from:notifications", remove_labels="INBOX") \n- Label CEO emails as important: gmail_bulk_modify("from:ceo@company.com", add_labels="IMPORTANT")\n- Mark inbox as unread: gmail_bulk_modify("in:inbox -is:unread", add_labels="UNREAD")\n- Complex operation: gmail_bulk_modify("older_than:30d", add_labels="OLD", remove_labels="INBOX,UNREAD")\n\n✅ SAFER ALTERNATIVE: Use prepare_bulk_modify() to see preview and confirm before executing.')
('smart_send_email_unsafe', '⚠️ UNSAFE: Send email immediately without confirmation (use names or emails)')
('smart_share_file_unsafe', '⚠️ UNSAFE: Share file immediately without confirmation (use names or emails)')
('smart_create_event_unsafe', '⚠️ UNSAFE: Create calendar event immediately without confirmation (use names or emails)')
('smart_forward_email_unsafe', '⚠️ UNSAFE: Forward email immediately without confirmation (use names or emails)')
('confirm_send_email', '✅ Confirm and send the prepared email')
('confirm_bulk_modify', '✅ Confirm and execute the prepared bulk email operation')
('list_tokens', "Lists the current user's personal access tokens.")
('list_cards', "Lists the current user's credit cards.")
('create_card', 'Attaches a credit card (tokenized via Stripe) to the current user.')
('collect_card', 'Creates a temporary URL for collecting credit card information.')
('delete_card', 'Deletes a credit card by ID.')
('fetch_bop_data', 'Retrieves compact format time series data from the BOP database based on the input parameters.\n\nArgs:\n    freq (str): Frequency (e.g., "A" for annual, "Q" for quarterly, "M" for monthly).\n    country (str): Country code, multiple country codes can be connected with "+".\n    indicator (str): Indicator code.\n    start (str | int): Start year.\n    end (str | int): End year.\n\nReturns:\n    str: Description of the queried data. Do not perform further analysis or retry if the query fails.')
('fetch_mfs_data', 'Retrieves compact format time series data from the MFS database based on the input parameters.\n\nArgs:\n    freq (str): Frequency (e.g., "A" for annual).\n    country (str): Country code, multiple country codes can be connected with "+".\n    indicator (str): Indicator code.\n    start (str | int): Start year.\n    end (str | int): End year.\n\nReturns:\n    str: Description of the queried data. Do not perform further analysis or retry if the query fails.')
('fetch_fsi_data', 'Retrieves compact format time series data from the FSI database based on the input parameters.\n\nArgs:\n    freq (str): Frequency (e.g., "A" for annual).\n    country (str): Country code, multiple country codes can be connected with "+".\n    indicator (str): Indicator code.\n    start (str | int): Start year.\n    end (str | int): End year.\n\nReturns:\n    str: Description of the queried data. Do not perform further analysis or retry if the query fails.')
('inicial', 'Gera um mapa mental de conhecimentos iniciais sobre o tema.')
('press_key', 'Press a key on the device')
('itunes_previous', 'Return to the previous track.')
('get_secret_key', 'Get secret key from environment variables\n:return: Secret key')
('get_access_key', 'Get access key from environment variables\n:return: Access key')
('show_cluster', '显示指定OceanBase集群的概览\nIMPORTANT:\n    当集群状态不是"Running"时，直接停止回答返回信息\nArgs:\n    cluster_name: 要显示的集群名称\n    namespace: 集群所在的命名空间（默认为"default"）\nImportant:\n    1. 不要在短时间内重复调用该命令')
('change_tenant_password', '修改租户密码\n\nArgs:\n    tenant_name: 租户名称\n    password: 租户的新密码（必需）\n    namespace: 命名空间（默认为"default"）\n    force: 是否强制执行操作')
('replay_tenant_log', '回放租户日志\n\nArgs:\n    tenant_name: 租户名称\n    namespace: 命名空间（默认为"default"）\n    force: 是否强制执行操作\n    unlimited: 是否不限制时间（默认为True）\n    until_timestamp: 租户恢复的时间戳，例如: 2024-02-23 17:47:00')
('execute_odoo_code', 'Execute Python code in an Odoo shell environment with full access to Odoo models and environment.\n\nThis tool provides direct access to the Odoo ORM and all loaded modules through\nthe shell environment. The ``env`` variable is available for accessing models,\nand all standard Odoo shell features are accessible.\n\n:param code: Python code to execute in the Odoo context\n:type code: str\n:return: The output from executing the code\n:rtype: str\n\n.. note::\n   The shell maintains persistent state between calls, so variables\n   defined in one execution will be available in subsequent calls.\n   \n.. warning::\n   Code executed through this tool has full access to the Odoo database\n   and can modify data. Use with appropriate caution.')
('press_key', 'Press a single key.')
('take_screenshot', "Take a screenshot of the user's screen and return it as an image. Use\nthis tool anytime the user wants you to look at something they're doing.")
('get_info_cliente', 'Retorna as informações do cliente pelo nome. Retonar se o cliente está na base de clientes socios que lhes concendem o direito a participar dos super descontos negociados.')
('reservar_pedido_com_desconto', 'Reservar para o cliente associado a compra de um item com desconto na loja')
('take_screenshot', "Take a screenshot of the user's screen and return it as an image. Use\nthis tool anytime the user wants you to look at something they're doing.")
('send_ip', "Send IP tokens to another address.\n\n:param to_address: The recipient's wallet address\n:param amount: Amount of IP tokens to send (1 IP = 1 Ether)\n:return: Transaction result message")
('run_custom_graph_code', "Run custom Python code provided by Claude to generate a single graph using global df.\n\n📌 Claude Instructions:\n-----------------------\n✅ Use the global `df` (do not load or define it again)\n✅ Create **only one graph at a time**\n✅ Generate a matplotlib figure: `fig, ax = plt.subplots()`\n✅ Define `output_filename` as the name of the graph file (e.g., 'myplot.png')\n✅ Call: `save_path = save_plot_to_claude_graphs(fig, output_filename, work_dir)`\n\n❌ Do NOT manually call plt.savefig()\n❌ Do NOT skip assigning `save_path`\n\nYour job is to just create the graph and assign `save_path`. This tool handles execution and confirmation.\n\nParameters:\n-----------\ncode : str\n    Valid Python code string that uses the global `df`, defines:\n    - `fig`\n    - `output_filename`\n    - `save_path = save_plot_to_claude_graphs(...)`\n\nReturns:\n--------\nJSON string with:\n    - success: Whether the execution was successful\n    - message: Description of outcome\n    - imagePath: Path where the image was saved (if successful)")
('generate_payload', 'Generate a Metasploit payload using msfvenom.\n\nArgs:\n    payload_type: Type of payload (e.g., windows/meterpreter/reverse_tcp)\n    lhost: Listener host IP address\n    lport: Listener port\n    format_type: Output format (raw, exe, python, etc.)\n\nReturns:\n    Information about the generated payload')
('run_exploit', 'Configure and run a Metasploit exploit against a target.\n\nArgs:\n    exploit_name: Name of the exploit to use\n    target_host: Target IP address\n    target_port: Target port\n    payload: Optional payload to use\n\nReturns:\n    Result of the exploit attempt')
('send_session_command', 'Send a command to an active Metasploit session.\n\nArgs:\n    session_id: ID of the session\n    command: Command to execute\n\nReturns:\n    Command output')
